#pragma checksum "C:\Users\joris\Bureaublad\PROJECTEN\Project_BugTracker\BugTracker\Views\Home\Help.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "46f9c871fcf60278555fa3713ba7ff81154a8cb6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Help), @"mvc.1.0.view", @"/Views/Home/Help.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\joris\Bureaublad\PROJECTEN\Project_BugTracker\BugTracker\Views\_ViewImports.cshtml"
using BugTracker;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\joris\Bureaublad\PROJECTEN\Project_BugTracker\BugTracker\Views\_ViewImports.cshtml"
using BugTracker.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"46f9c871fcf60278555fa3713ba7ff81154a8cb6", @"/Views/Home/Help.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"415cd50ac37814e1a4fb76bf7d07627084cdfa27", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Help : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\joris\Bureaublad\PROJECTEN\Project_BugTracker\BugTracker\Views\Home\Help.cshtml"
  
    ViewData["Title"] = "Help";


#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<h2>Creator</h2>
<p>This application is created by <b>Joris De Ridder</b></p>
<p>2th year student programming Thomas More in Belgium, Lier</p>
<p>This website is created using ASP.NET CORE</p>

<hr />

<h2>What do I do now?</h2>
<p>first of all you gotta click on the register or log in button on the homepage.</p>
<p>After that you get a screen where you can log in or register.</p>
<p>After that you can fill out your name and password and you are logged in.</p>
<p>Now you can make use of the bug tracker by adding your developper team.</p>

<hr />

<h3>What is bug tracking?</h3>
<p>
    Bug tracking is the process of logging and monitoring bugs or errors during software testing. It is also referred to as defect tracking or issue tracking. Large systems may have hundreds or thousands of defects. Each needs to be evaluated, monitored and prioritized for debugging. In some cases, bugs may need to be tracked over a long period of time.
    “Defect tracking is an important process in software eng");
            WriteLiteral(@"ineering, as complex and business critical systems have hundreds of defects,” says Tutorials Point. “One of the challenging factors is managing, evaluating and prioritizing these defects. The number of defects gets multiplied over a period of time and to effectively manage them, a defect tracking system is used to make the job easier.""

    <h3>How bug tracking works</h3>
<p>
    A software bug occurs when an application or program doesn’t work the way it is designed to function. Most errors are faults or mistakes made by system architects, designers or developers. Testing teams use bug tracking to monitor and report on errors that occur as an application is developed and tested.
    “A major component of a bug tracking system is a database that records facts about known bugs,” says Wikipedia. “Facts may include the time a bug was reported, its severity, the erroneous program behavior and details on how to reproduce the bug; as well as the identity of the person who reported it and any programmers who ma");
            WriteLiteral(@"y be fixing it.”
</p>
<br />
<p>During its lifetime, a single defect may go through several stages or states. They include:</p>
<ul>
    <li>Active: Investigation is underway</li>
    <li>Test: Fixed and ready for testing</li>
    <li>Verified: Retested and verified by quality assurance (QA)</li>
    <li>Closed: Can be closed after QA retesting or if it is not considered to be a defect</li>
    <li>Reopened: Not fixed and reactivated</li>
</ul>
<p>Bugs are managed based on priority and severity. Severity levels help to identify the relative impact of a problem on a product release. These classifications may vary in number, but they generally include some form of the following:</p>
<ul>
    <li>Catastrophic: Causes total failure of the software or unrecoverable data loss. There is no workaround and the product can’t be released.</li>
    <li>Impaired functionality: A workaround may exist, but it is unsatisfactory. The software can’t be released.</li>
    <li>Failure of non-critical systems: A re");
            WriteLiteral(@"asonably satisfactory workaround exists. The product may be released, if the bug is documented.</li>
    <li>Very minor: There is a workaround, or the issue can be ignored. It does not impact a product release.</li>
    <li> In most cases, states and severity levels are monitored in a bug tracking database. A good tracking platform also ties into larger software development and management systems: the better to assess error status and the potential impact on overall production and timelines.</li>
</ul>

<hr />

<h3>Why bug tracking is important</h3>
<p>
    It is estimated that software developers make 100 to 150 errors for every thousand lines of code. According to a report by the Consortium for IT Software Quality (CISQ): “Even if only a small fraction — say 10 percent — of these errors are serious, then a relatively small application of 20,000 lines of code will have roughly 200 serious coding errors."" 5
    Software testing is essential for isolating and mitigating errors. A good QA process can ");
            WriteLiteral(@"uncover hundreds or even thousands of defects, and testing teams need to manage all of them. Integrating bug tracking into the testing workflow improves efficiency by helping testers prioritize, monitor and report on the status of each error.
    “Defect tracking helps ensure that bugs found in the system actually get fixed,” says Agile consultant, Yvette Francino. “Tracking tools not only provide a way to ensure follow-through but also provide valuable metrics. Depending on the tool being used, the team can tie defects to changed code, tests or other data that will allow for traceability or analysis on defect trends. If a certain module is riddled with defects, it may be time to review and rewrite that module."" 6
    Ideally, testing should be done as soon as possible — when bugs are easier and far less costly to fix. An earlier study by IBM found that defects found post-production or after release can cost 15 times more to fix compared to errors resolved early in development.
    Many teams are now using");
            WriteLiteral(@" a methodology known as continuous testing. In this case, quality testing and feedback are conducted at all stages of development, from design and coding to deployment. Modern technologies like artificial intelligence (AI) too can aid the testing process by detecting and analyzing bugs early in the lifecycle.
</p>

<h3>Application quality and testing</h3>
<p>See how to get increasingly complicated applications to market faster, with fewer defects and at lower cost.</p>

<hr />

<h4>Key features of bug tracking</h4>

<p>
    Quality control is critical for developing robust applications. Software testing, change management and bug tracking tools allow teams to uncover defects, measure their scope and impact — and resolve them.
    In the Harvard Business Review, Nicholas Bowen outlines a process for managing defects. The first step is to classify and prioritize: “Generally, teams will prioritize two types of bugs: those that cause a system to crash and those that are less severe but could be pervas");
            WriteLiteral(@"ive....Next, decide your target response time for each level of severity. If the quality management system is new, then the initial focus should be on fixing the most severe bugs within hours or days. As you use your system, you can gather data on two key metrics, incoming bug rates and the productivity of the bug fixers, and adjust your targets as needed.” He says organizations also need to create a system where defects and the time required to resolve them can be reviewed at all levels, from the CEO on down.7
    A good bug tracking system can assist this process by providing a single workflow for defect monitoring, reporting and lifecycle traceability. It should further link with other management systems for shared visibility and feedback both within software development and the larger organization. IBM Rational ClearQuest, for example, provides a centralized platform for error tracking and reporting. It integrates with other IBM development and change management systems, and helps improve communication a");
            WriteLiteral(@"nd collaboration among developers, operations and broader teams.
    As well, look for testing and tracking systems that use AI to detect errors early in the development process. It can optimize the number and types of tests that teams run, automate the testing process and use AI to analyze past defects and prevent them in the future.
</p>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
