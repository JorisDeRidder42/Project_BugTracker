// <auto-generated />
using System;
using BugTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BugTracker.Migrations
{
    [DbContext(typeof(BugTrackerContext))]
    partial class BugTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BugTracker.Models.BugStatus", b =>
                {
                    b.Property<int>("BugStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BugStatusType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BugStatusID");

                    b.ToTable("BugStatus");
                });

            modelBuilder.Entity("BugTracker.Models.Bugs", b =>
                {
                    b.Property<int>("BugsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BugClosedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BugClosedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BugCreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BugCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("BugDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BugStatusID")
                        .HasColumnType("int");

                    b.Property<string>("BugTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BugType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BugsPriorityID")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectBugsID")
                        .HasColumnType("int");

                    b.HasKey("BugsID");

                    b.HasIndex("BugClosedByUserID");

                    b.HasIndex("BugCreatedByUserID");

                    b.HasIndex("ProjectBugsID");

                    b.ToTable("Bugs");
                });

            modelBuilder.Entity("BugTracker.Models.BugsPriority", b =>
                {
                    b.Property<int>("BugsPriorityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PriorityType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BugsPriorityID");

                    b.ToTable("BugsPriority");
                });

            modelBuilder.Entity("BugTracker.Models.ProjectBugs", b =>
                {
                    b.Property<int>("ProjectBugsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BugsID")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsID")
                        .HasColumnType("int");

                    b.HasKey("ProjectBugsID");

                    b.ToTable("ProjectBugs");
                });

            modelBuilder.Entity("BugTracker.Models.Projects", b =>
                {
                    b.Property<int>("ProjectsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProjectBugsID")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectsAccesProjectAccesID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectsID");

                    b.HasIndex("ProjectBugsID");

                    b.HasIndex("ProjectsAccesProjectAccesID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("BugTracker.Models.ProjectsAcces", b =>
                {
                    b.Property<int>("ProjectAccesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectsID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ProjectAccesID");

                    b.ToTable("ProjectsAcces");
                });

            modelBuilder.Entity("BugTracker.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BugID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectsAccesProjectAccesID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("allowEmailNotification")
                        .HasColumnType("bit");

                    b.HasKey("UserID");

                    b.HasIndex("ProjectsAccesProjectAccesID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BugTracker.Models.Bugs", b =>
                {
                    b.HasOne("BugTracker.Models.User", "BugClosedBy")
                        .WithMany()
                        .HasForeignKey("BugClosedByUserID");

                    b.HasOne("BugTracker.Models.User", "BugCreatedBy")
                        .WithMany()
                        .HasForeignKey("BugCreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Models.ProjectBugs", null)
                        .WithMany("Bugs")
                        .HasForeignKey("ProjectBugsID");
                });

            modelBuilder.Entity("BugTracker.Models.Projects", b =>
                {
                    b.HasOne("BugTracker.Models.ProjectBugs", null)
                        .WithMany("Projects")
                        .HasForeignKey("ProjectBugsID");

                    b.HasOne("BugTracker.Models.ProjectsAcces", "ProjectsAcces")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectsAccesProjectAccesID");
                });

            modelBuilder.Entity("BugTracker.Models.User", b =>
                {
                    b.HasOne("BugTracker.Models.ProjectsAcces", "ProjectsAcces")
                        .WithMany("User")
                        .HasForeignKey("ProjectsAccesProjectAccesID");
                });
#pragma warning restore 612, 618
        }
    }
}
